#!/usr/bin/env python3
# -- coding: utf-8 --
"""
Credit: @author: carlos
"""

#Libraries for Plottig and Math Calculations
import numpy as np #Math Library for Python
import matplotlib.pyplot as plot #Library for Plotting
import scipy.integrate as sp #Library used for the Integrations

plot.close("all")


G = 6.6742*10**-11; #Gravitational constant

# Earth Parameters #
R = 6357000.0 # m
M = 5.972e24 # kg

#Rocket Parameters#
#Parameters for the rocket launch#

x0 = R 
z0 = 0.0
vz0 = 0.0
vx0 = 0.0
r0 = 300000 + R

period = 6000 #2*np.pi/np.sqrt(G*M)r0*(3.0/2.0)*1.5
wton = 5.3
totalMass = wton*2000/2.2 # kg
maxThrust = 210000.0
Isp1 = 250.0 # seconds
Isp2 = 400.0 

tMECO = 38.0 #main engine cutoff time
firstStageSepTime = 2.0 #length of time to remove 1st stage
mass1t = 0.2
mass1 = mass1t*2000/2.2
t2begin = 261.0
t2fin = t2begin + 17.5

##Gravitational Acceleration Model##
def gravityF(x,z):
    global R,M
    
    r = np.sqrt(x*2 + z*2)
    
    if r < 0:
        accelx = 0.0
        accelz = 0.0
    else:
        accelx = G*M/(r**3)*x
        accelz = G*M/(r**3)*z
        
    return np.asarray([accelx,accelz])

def propulsionF(t):
    global maxThrust,Isp,tMECO
    ##Timing for thrusters
    if t < tMECO:
        #We are firing the main thruster
        theta = 50*np.pi/180.0
        thrustF = maxThrust
        ve = Isp1*9.81 # m/s
        mdot = -thrustF/ve
    if t > tMECO and t < (tMECO + firstStageSepTime):
        theta = 0.0
        thrustF = 0.0
        ## masslost = mass1
        mdot = -mass1/firstStageSepTime
    if t > (tMECO + firstStageSepTime):
        theta = 0.0
        thrustF = 0.0
        mdot = 0.0
    if t > (t2begin) and t < (t2fin):
        theta = 90.0*np.pi/180.0
        thrustF = maxThrust
        ve = Isp2*9.81 # m/s
        mdot = -thrustF/ve
    if t > t2fin:
        theta = 0.0
        thrustF = 0.0
        mdot = 0.0
    
    thrustx = thrustF*np.cos(theta)
    thrustz = thrustF*np.sin(theta)
      
    
    return np.asarray([thrustx,thrustz]),mdot
    
###Equations of Motion
###F = m*a = m*zddot
## z is the altitude from the center of the planet along the north pole
### x  is the altitude from center along equator through Africa 
## this is in meter
## zdot is the velocity along z
## zddot is the acceleration along z
###Second Order Differential Equation
def Derivatives(state,t):
    #state vector
    x = state[0]
    z = state[1]
    velx = state[2]
    velz = state[3]
    mass = state[4]
    
    #Compute zdot - Kinematic Relationship#
    zdot = velz
    xdot = velx
    
    ###Compute the Total Forces###
    ###GRavity###
    gravityF = -gravityF(x,z)*mass
    
    ###Aerodynamics###
    aeroF = np.asarray([0.0,0.0])
    
    ###Thrust###
    thrustF, mdot = propulsionF(t)
    
    Forces = gravityF + aeroF + thrustF
    
    #Compute Acceleration#
    if mass > 0:
        ddot = Forces/mass
    else:
        ddot = 0.0
        mdot = 0.0
    
    #Compute the statedot#
    statedot = np.asarray([xdot, zdot, ddot[0], ddot[1], mdot])
    
    return statedot

###MAIN SCRIPT###

###Test Surface Gravity###
print('Surface Gravity (m/s^2) = ', gravityF(0, R))

##Compute Exit Velocity##
##Populate Initial Condition Vector##
stateinitial = np.asarray([x0, z0, vx0, vz0, totalMass])

##Time window
tout = np.linspace(0, period, 1000)

###Numerical Integration Call###
stateout = sp.odeint(Derivatives, stateinitial, tout)

###REname variables###
xout = stateout[:, 0]
zout = stateout[:, 1]
altitude = np.sqrt(xout*2 + zout*2) - R
velxout = stateout[:, 2]
velzout = stateout[:, 3]
velout = np.sqrt(velxout*2 + velzout*2)
massout = stateout[:, 4]

###Plot###

###ALTITUDE###
plot.plot(tout,altitude)
plot.xlabel('Time (sec)')
plot.ylabel('Altitude (m)')
plot.grid()

###VELOCITY###
plot.figure()
plot.plot(tout,velout)
plot.xlabel('Time (sec)')
plot.ylabel('Total Speed (m/s)')
plot.grid()

###Mass###
plot.figure()
plot.plot(tout,massout)
plot.xlabel('Time (sec)')
plot.ylabel('Mass (kg)')
plot.grid()

##2D Orbit##
plot.figure()
plot.plot(xout, zout, 'r-', label='Orbit')
plot.plot(xout[0], zout[0], 'g*')
theta = np.linspace(0, 2 * np.pi, 1000)
xplanet = R * np.sin(theta)
yplanet = R * np.cos(theta)
plot.plot(xplanet, yplanet,'b-', label='Planet')
plot.grid()
plot.legend()

plot.show()
